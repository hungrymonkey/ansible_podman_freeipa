---

# https://computingforgeeks.com/secure-freeipa-server-with-lets-encrypt-ssl-certificate/
# https://github.com/freeipa/freeipa-letsencrypt

- name: Check if certificate already exists.
  ansible.builtin.stat:
    path: "{{ freeipa_letsencrypt_path }}/config/archive/{{ freeipa_domain_name }}/cert1.pem"
  become: true
  register: letsencrypt_cert

- name: Ensure Install Directory Exists
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ freeipa_user_uid }}"
    group: "{{ freeipa_user_gid }}"
    mode: 0700
  with_items:
    - "{{ freeipa_letsencrypt_path }}/config"
    - "{{ freeipa_letsencrypt_path }}/working"
    - "{{ freeipa_letsencrypt_path }}/cert"
  become: true
  when: freeipa_enabled|bool

- name: Download letsencrypt root certs
  ansible.builtin.get_url:
    url: "https://letsencrypt.org/certs/{{ item }}"
    dest: "{{ freeipa_letsencrypt_path }}/cert/{{ item }}"
    mode: '0600'
  with_items:
    - "isrgrootx1.pem"
    - "isrg-root-x2.pem"
    - "lets-encrypt-r3.pem"
    - "lets-encrypt-e1.pem"
    - "lets-encrypt-r4.pem"
    - "lets-encrypt-e2.pem"
  become: true
  when: not letsencrypt_cert.stat.exists

- name: Stop services to allow certbot to generate a cert.
  ansible.builtin.service:
    name: "{{ item }}"
    state: stopped
  when: not letsencrypt_cert.stat.exists
  with_items: "{{ letsencrypt_certbot_create_standalone_stop_services }}"


- name: Generate new certificate if one doesn't exist.
  ansible.builtin.command: >
        "{{ certbot_script }}" certonly --standalone --noninteractive
        --agree-tos --email "{{ letsencrypt_certbot_admin_email }}"
        --preferred-challenges http
        --config-dir "{{ freeipa_letsencrypt_path }}/config"
        --working-dir "{{ freeipa_letsencrypt_path }}/working"
        -d "{{ freeipa_domain_name }}"
  when:
    - not letsencrypt_cert.stat.exists
    - not letsencrypt_certbot_staging|bool

- name: Generate new staging certificate if one doesn't exist.
  ansible.builtin.command: >
      "{{ certbot_script }}" certonly --standalone --noninteractive
      --agree-tos --email "{{ letsencrypt_certbot_admin_email }}"
      --preferred-challenges http
      --config-dir "{{ freeipa_letsencrypt_path }}/config"
      --working-dir "{{ freeipa_letsencrypt_path }}/working"
      -d "{{ freeipa_domain_name }}"
      --staging
  when:
    - not letsencrypt_cert.stat.exists
    - letsencrypt_certbot_staging|bool

- name: Start services after cert has been generated.
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
  when: not letsencrypt_cert.stat.exists
  with_items: "{{ letsencrypt_certbot_create_standalone_stop_services }}"


- name: Ensure freeipa systemd files are installed installed
  ansible.builtin.template:
    src: "{{ role_path }}/templates/freeipa-letsencrypt/{{ item }}.j2"
    dest: "{{ freeipa_systemd_path }}/{{ item }}"
    mode: 0640
  with_items:
    - freeipa-letsencrypt.service
    - freeipa-letsencrypt.timer
  notify:
    - enable freeipa-letsencrypt
  when:
    - letsencrypt_certbot_enabled|bool


###
# Deleting letsencrypt timer
###

- name: Check existence of freeipa-letsencrypt timer
  ansible.builtin.stat:
    path: "{{ freeipa_systemd_path }}/freeipa-letsencrypt.timer"
  register: freeipa_letsencrypt
  when: "not letsencrypt_certbot_enabled|bool or not freeipa_haproxy_enabled|bool"

- name: Delete freeipa-letsencrypt.timer
  block:
    - name: Stop freeipa-letsencrypt.timer timer
      ansible.builtin.systemd:
        name: freeipa-letsencrypt.timer
        state: stopped

    - name: Ensure freeipa-letsencrypt.timer doesn't exist
      ansible.builtin.file:
        path: "{{ freeipa_systemd_path }}/{{ item }}"
        state: absent
      notify:
        - reload systemd
      with_items:
        - freeipa-letsencrypt.service
        - freeipa-letsencrypt.timer
  when:
    - (not letsencrypt_certbot_enabled|bool) or (not freeipa_haproxy_enabled|bool)
    - freeipa_letsencrypt.stat.exists|bool
